# Radicle - Install
- name: Stop Radicle node
  ansible.builtin.include_tasks:
    file: stop.yml

- name: Create user
  ansible.builtin.user:
    name: '{{ radicle_user }}'
    shell: /usr/sbin/nologin
    create_home: false
    home: '{{ radicle_folder }}'
    system: true
    password_lock: true

- name: Create app folder
  ansible.builtin.file:
    path: '{{ radicle_folder }}'
    state: directory
    mode: '755'
    owner: '{{ radicle_user }}'
    group: '{{ radicle_user }}'

- name: Download app
  ansible.builtin.get_url:
    url: '{{ radicle_url }}'
    dest: '{{ temp_folder }}/{{ radicle_archive }}'
    checksum: sha256:{{ radicle_checksum_url }}
    mode: '644'

- name: Create archive folder
  ansible.builtin.file:
    path: '{{ radicle_archive_folder }}'
    state: directory
    mode: '755'

- name: Unarchive
  ansible.builtin.unarchive:
    src: '{{ temp_folder }}/{{ radicle_archive }}'
    dest: '{{ radicle_archive_folder }}'
    remote_src: true

- name: Create install folder
  ansible.builtin.file:
    path: '{{ radicle_install_folder }}'
    state: directory
    owner: '{{ base_user }}'
    group: '{{ base_group }}'
    mode: '755'

- name: Find unarchived app bin
  ansible.builtin.find:
    paths: '{{ radicle_archive_folder }}'
    patterns: '{{ radicle_bin }}'
    recurse: true
  register: radicle_find_bin

- name: Install
  ansible.builtin.copy:
    src: '{{ radicle_find_bin.files[0].path | dirname }}/{{ item }}'
    dest: '{{ radicle_install_folder }}/{{ item }}'
    owner: '{{ base_user }}'
    group: '{{ base_group }}'
    mode: '755'
  loop: '{{ radicle_binaries | split }}'
  notify:
    - 'Restart service {{ radicle_service_name }}'

- name: Compute alias
  ansible.builtin.set_fact:
    radicle_node_alias: "{{ ansible_all_ipv4_addresses | hash('sha256') | regex_search('[a-z,0-9]{10}') }}"
  when: radicle_node_alias == ''

- name: Init
  ansible.builtin.shell: |
    set -o pipefail
    echo | rad auth --alias {{ radicle_node_alias }} --stdin
  args:
    chdir: '{{ radicle_folder }}'
    creates: '{{ radicle_folder }}/{{ radicle_config_file }}'
    executable: bash
  become: true
  become_user: '{{ radicle_user }}'
  environment:
    RAD_HOME: '{{ radicle_folder }}'
  notify:
    - 'Restart service {{ radicle_service_name }}'

- name: Create systemd service
  ansible.builtin.template:
    src: '{{ item }}.j2'
    dest: '/lib/systemd/system/{{ item }}'
    owner: '{{ base_user }}'
    group: '{{ base_group }}'
    mode: '644'
  loop:
    - '{{ radicle_service_name }}.service'
  notify:
    - 'Restart service {{ radicle_service_name }}'

- name: Enable and start service
  ansible.builtin.systemd_service:
    enabled: true
    state: started
    name: '{{ radicle_service_name }}'

- name: Flush handlers
  ansible.builtin.meta: flush_handlers
